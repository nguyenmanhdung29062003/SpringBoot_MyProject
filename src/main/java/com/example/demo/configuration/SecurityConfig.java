package com.example.demo.configuration;

import java.util.Arrays;
import java.util.List;

import javax.crypto.spec.SecretKeySpec;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.oauth2.jose.jws.MacAlgorithm;
import org.springframework.security.oauth2.jwt.JwtDecoder;
import org.springframework.security.oauth2.jwt.NimbusJwtDecoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import lombok.experimental.NonFinal;

//Ch√∫ th√≠ch n√†y cho ph√©p ph√¢n quy·ªÅn tr√™n METHOD
@EnableMethodSecurity
////Ch√∫ th√≠ch n√†y ch·ªâ ra r·∫±ng l·ªõp n√†y l√† m·ªôt ngu·ªìn ƒë·ªãnh nghƒ©a bean cho ng·ªØ c·∫£nh ·ª©ng d·ª•ng, c·∫•u h√¨nh.
@Configuration
//Annotation n√†y cho ph√©p h·ªó tr·ª£ b·∫£o m·∫≠t web c·ªßa Spring Security.
@EnableWebSecurity
public class SecurityConfig {
	@NonFinal
	@Value("${jwt.signerKey}")
	private String SIGNER_KEY;
	private final String[] PUBLIC_ENDPOINT_POST = { "/login", "/user", "/logoutaccount", "/introspect", "/refreshToken",
			"/swagger-ui/**", "/v3/api-docs/**", "/swagger-resources/**", "/swagger-ui.html", "/webjars/**" };
	private final String[] PUBLIC_ENDPOINT_GET = { "/user/{id}", "/swagger-ui/**", "/v3/api-docs/**",
			"/swagger-resources/**", "/swagger-ui.html", "/webjars/**" };

	@Autowired
	private CustomJWTDecoder customJWTDecoder;

	@Bean
	// N√≥ ƒë·ªãnh nghƒ©a m·ªôt SecurityFilterChain, ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ c·∫•u h√¨nh b·∫£o m·∫≠t cho
	// ·ª©ng d·ª•ng.
	public SecurityFilterChain filterChain(HttpSecurity httpSecurity) throws Exception {

		httpSecurity.cors(Customizer.withDefaults());
		// ‚úÖ 1. Enable CORS using the CorsConfigurationSource bean

		// nh·ªØng end point "/user, /login,/...." n√†o ta s·∫Ω b·∫£o v·ªá, v√† nh·ªØng end point ta
		// cho user truy c·∫≠p v√†o m√† k c·∫ßn b·∫£ v·ªá
		// vd k c·∫ßn b·∫£o v·ªá : ƒëƒÉng k√Ω tk, trang ch·ªß, ƒëƒÉng nh·∫≠p
		// ta ti·∫øn h√†nh c·∫•u h√¨nh b·∫±ng requestMatchers(...) ch·ª©a 2 param : Method v√†
		// EndPoint cho c√°c endpoint m√† k c·∫ßn b·∫£o v·ªá
		httpSecurity.authorizeHttpRequests(request -> request.requestMatchers(HttpMethod.POST, PUBLIC_ENDPOINT_POST)
				.permitAll().requestMatchers(HttpMethod.GET, PUBLIC_ENDPOINT_GET).permitAll()
//						ki·ªÉm tra trong TOKEN n·∫øu l√† ADMIN th√¨ ƒë∆∞·ª£c call ƒë·∫øn endpoint n√†y
				// .requestMatchers(HttpMethod.GET,"/users").hasAuthority("SCOPE_ADMIN")
				.requestMatchers(HttpMethod.OPTIONS, "/**").permitAll().anyRequest().authenticated());
		// t·∫Øt CSRF
		httpSecurity.csrf(AbstractHttpConfigurer::disable);

		// ƒë·ªëi v·ªõi nh·ªØng endpoint m√† k m·ªü public th√¨ ta mu·ªën user cung c·∫•p m·ªôt TOKEN h·ª£p
		// l·ªá m·ªõi ƒë∆∞·ª£c access
		// sd oauth2-resource-service
		// x√°c th·ª±c TOKEN
		httpSecurity.oauth2ResourceServer(oauth2 -> oauth2.jwt(JwtConfigurer -> JwtConfigurer.decoder(customJWTDecoder)) // x√°c
																															// th·ª±c
																															// TOKEN
																															// c√≥
																															// x√©t
																															// th
																															// l√¥gout
				.authenticationEntryPoint(new JwtAuthenticationEntryPoint()) // khi x√°c th·ª±c false th√¨ ta s·∫Ω ƒëi·ªÅu h∆∞·ªõng
																				// user ƒëi ƒë√¢u, trong TH n√†y ta ch·ªâ c·∫ßn
																				// tr·∫£ v·ªÅ m·ªôt c√°i ErrorMessage th√¥i

		);
		return httpSecurity.build();
	}

	@Bean
	public JwtDecoder jwtDecoder() {
		// bao g·ªìm 2 tham s·ªë : secretKey v√† Thu·∫≠t to√°n
		SecretKeySpec secretkey = new SecretKeySpec(SIGNER_KEY.getBytes(), "HS512");
		return NimbusJwtDecoder.withSecretKey(secretkey).macAlgorithm(MacAlgorithm.HS512).build();

	}

	// ‚úÖ 2. Define the CorsConfigurationSource bean for Spring Security
	@Bean
	public CorsConfigurationSource corsConfigurationSource() {
		CorsConfiguration configuration = new CorsConfiguration();
		// üëá Replace with your frontend's actual origin(s)
		configuration.setAllowedOrigins(Arrays.asList("http://localhost:3000"));
		configuration.setAllowedMethods(Arrays.asList("GET", "POST", "PUT", "DELETE", "OPTIONS"));
		configuration.setAllowedHeaders(List.of("*")); // Or specify headers like "Authorization", "Content-Type"
		// configuration.setAllowCredentials(true); // Uncomment if your frontend sends
		// credentials and you need them

		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
		source.registerCorsConfiguration("/**", configuration); // Apply this CORS configuration to all paths
		return source;
	}

}
